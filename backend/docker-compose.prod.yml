version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: prototype-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-prototype}
      POSTGRES_USER: ${POSTGRES_USER:-prototype_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_in_production}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - prototype-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-prototype_user}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and Celery
  redis:
    image: redis:7-alpine
    container_name: prototype-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-secure_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - prototype-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery-worker:
    build: .
    container_name: prototype-celery-worker
    command: celery -A app.celery worker --loglevel=info --concurrency=4
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-prototype_user}:${POSTGRES_PASSWORD:-secure_password_change_in_production}@postgres:5432/${POSTGRES_DB:-prototype}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-secure_redis_password}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-secure_redis_password}@redis:6379/0
      - REDIS_URL=redis://:${REDIS_PASSWORD:-secure_redis_password}@redis:6379/0
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - prototype-network
    restart: unless-stopped

  # Celery Beat (for scheduled tasks)
  celery-beat:
    build: .
    container_name: prototype-celery-beat
    command: celery -A app.celery beat --loglevel=info
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-prototype_user}:${POSTGRES_PASSWORD:-secure_password_change_in_production}@postgres:5432/${POSTGRES_DB:-prototype}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-secure_redis_password}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-secure_redis_password}@redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - prototype-network
    restart: unless-stopped

  # Flask API Application
  api:
    build: .
    container_name: prototype-api
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-prototype_user}:${POSTGRES_PASSWORD:-secure_password_change_in_production}@postgres:5432/${POSTGRES_DB:-prototype}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-secure_redis_password}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-secure_redis_password}@redis:6379/0
      - REDIS_URL=redis://:${REDIS_PASSWORD:-secure_redis_password}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - prototype-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: prototype-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs:/var/log/nginx
    depends_on:
      - api
    networks:
      - prototype-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  prototype-network:
    driver: bridge 
"""Add enhanced form fields and QR code support

Revision ID: aafda9d95835
Revises: 2fd6689365cb
Create Date: 2025-07-26 16:15:28.792360

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'aafda9d95835'
down_revision = '2fd6689365cb'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('form_qr_code',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('form_id', sa.Integer(), nullable=False),
    sa.Column('qr_code_data', sa.Text(), nullable=False),
    sa.Column('external_url', sa.String(length=500), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('size', sa.Integer(), nullable=True),
    sa.Column('error_correction', sa.String(length=10), nullable=True),
    sa.Column('border', sa.Integer(), nullable=True),
    sa.Column('background_color', sa.String(length=7), nullable=True),
    sa.Column('foreground_color', sa.String(length=7), nullable=True),
    sa.Column('scan_count', sa.Integer(), nullable=True),
    sa.Column('last_scanned', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['form_id'], ['form.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('audit_logs', schema=None) as batch_op:
        batch_op.drop_index('idx_audit_logs_resource')
        batch_op.drop_index('idx_audit_logs_user')

    op.drop_table('audit_logs')
    with op.batch_alter_table('submissions', schema=None) as batch_op:
        batch_op.drop_index('idx_submissions_created_at')
        batch_op.drop_index('idx_submissions_data_gin', postgresql_using='gin')
        batch_op.drop_index('idx_submissions_form')
        batch_op.drop_index('idx_submissions_status')
        batch_op.drop_index('idx_submissions_user')

    op.drop_table('submissions')
    op.drop_table('notification_templates')
    with op.batch_alter_table('webhook_logs', schema=None) as batch_op:
        batch_op.drop_index('idx_webhook_logs_created_at')
        batch_op.drop_index('idx_webhook_logs_status')

    op.drop_table('webhook_logs')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index('idx_users_active')
        batch_op.drop_index('idx_users_email')
        batch_op.drop_index('idx_users_organization')

    op.drop_table('users')
    op.drop_table('form_templates')
    op.drop_table('error_logs')
    with op.batch_alter_table('integrations', schema=None) as batch_op:
        batch_op.drop_index('idx_integrations_organization')

    op.drop_table('integrations')
    op.drop_table('report_templates')
    op.drop_table('notifications')
    with op.batch_alter_table('form_analytics', schema=None) as batch_op:
        batch_op.drop_index('idx_form_analytics_form_date')

    op.drop_table('form_analytics')
    op.drop_table('report_categories')
    op.drop_table('performance_metrics')
    op.drop_table('api_keys')
    op.drop_table('report_distributions')
    op.drop_table('form_categories')
    op.drop_table('organizations')
    op.drop_table('roles')
    op.drop_table('user_roles')
    with op.batch_alter_table('forms', schema=None) as batch_op:
        batch_op.drop_index('idx_forms_category')
        batch_op.drop_index('idx_forms_created_by')
        batch_op.drop_index('idx_forms_organization')
        batch_op.drop_index('idx_forms_slug')
        batch_op.drop_index('idx_forms_status')

    op.drop_table('forms')
    with op.batch_alter_table('reports', schema=None) as batch_op:
        batch_op.drop_index('idx_reports_created_at')
        batch_op.drop_index('idx_reports_organization')
        batch_op.drop_index('idx_reports_status')
        batch_op.drop_index('idx_reports_template')

    op.drop_table('reports')
    op.drop_table('report_schedules')
    with op.batch_alter_table('form', schema=None) as batch_op:
        batch_op.add_column(sa.Column('external_url', sa.String(length=500), nullable=True))
        batch_op.add_column(sa.Column('qr_code_data', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('form_settings', sa.JSON(), nullable=True))
        batch_op.add_column(sa.Column('access_key', sa.String(length=100), nullable=True))
        batch_op.add_column(sa.Column('view_count', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('submission_limit', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('expires_at', sa.DateTime(), nullable=True))

    with op.batch_alter_table('form_submission', schema=None) as batch_op:
        batch_op.add_column(sa.Column('ip_address', sa.String(length=45), nullable=True))
        batch_op.add_column(sa.Column('user_agent', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('submission_source', sa.String(length=50), nullable=True))
        batch_op.add_column(sa.Column('location_data', sa.JSON(), nullable=True))
        batch_op.add_column(sa.Column('processing_notes', sa.Text(), nullable=True))

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('form_submission', schema=None) as batch_op:
        batch_op.drop_column('processing_notes')
        batch_op.drop_column('location_data')
        batch_op.drop_column('submission_source')
        batch_op.drop_column('user_agent')
        batch_op.drop_column('ip_address')

    with op.batch_alter_table('form', schema=None) as batch_op:
        batch_op.drop_column('expires_at')
        batch_op.drop_column('submission_limit')
        batch_op.drop_column('view_count')
        batch_op.drop_column('access_key')
        batch_op.drop_column('form_settings')
        batch_op.drop_column('qr_code_data')
        batch_op.drop_column('external_url')

    op.create_table('report_schedules',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('template_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('cron_expression', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('timezone', sa.VARCHAR(length=50), server_default=sa.text("'UTC'::character varying"), autoincrement=False, nullable=True),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('recipients', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('last_run_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('next_run_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('run_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('failure_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('max_failures', sa.INTEGER(), server_default=sa.text('3'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='report_schedules_created_by_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='report_schedules_organization_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['template_id'], ['report_templates.id'], name='report_schedules_template_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='report_schedules_pkey')
    )
    op.create_table('reports',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('template_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('report_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('data_snapshot', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('file_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('file_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('file_format', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('generation_time', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('scheduled_for', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('view_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('download_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='reports_created_by_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='reports_organization_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['template_id'], ['report_templates.id'], name='reports_template_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='reports_pkey'),
    comment='Generated reports with automation support',
    postgresql_ignore_search_path=False
    )
    with op.batch_alter_table('reports', schema=None) as batch_op:
        batch_op.create_index('idx_reports_template', ['template_id'], unique=False)
        batch_op.create_index('idx_reports_status', ['status'], unique=False)
        batch_op.create_index('idx_reports_organization', ['organization_id'], unique=False)
        batch_op.create_index('idx_reports_created_at', ['created_at'], unique=False)

    op.create_table('forms',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('category_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('slug', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('fields', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('styling', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'draft'::character varying"), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('allow_anonymous', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('require_authentication', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('max_submissions', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('submission_limit_per_user', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('auto_responder_enabled', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('auto_responder_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('redirect_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('google_analytics_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('view_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('submission_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('published_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['form_categories.id'], name='forms_category_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='forms_created_by_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='forms_organization_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='forms_pkey'),
    sa.UniqueConstraint('organization_id', 'slug', name='forms_organization_id_slug_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='Dynamic forms with advanced configuration',
    postgresql_ignore_search_path=False
    )
    with op.batch_alter_table('forms', schema=None) as batch_op:
        batch_op.create_index('idx_forms_status', ['status'], unique=False)
        batch_op.create_index('idx_forms_slug', ['organization_id', 'slug'], unique=False)
        batch_op.create_index('idx_forms_organization', ['organization_id'], unique=False)
        batch_op.create_index('idx_forms_created_by', ['created_by'], unique=False)
        batch_op.create_index('idx_forms_category', ['category_id'], unique=False)

    op.create_table('user_roles',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('role_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('assigned_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('assigned_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['assigned_by'], ['users.id'], name='user_roles_assigned_by_fkey'),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name='user_roles_role_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_roles_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='user_roles_pkey'),
    sa.UniqueConstraint('user_id', 'role_id', name='user_roles_user_id_role_id_key', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('roles',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('permissions', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('is_system_role', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='roles_organization_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='roles_pkey'),
    sa.UniqueConstraint('organization_id', 'name', name='roles_organization_id_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('organizations',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('slug', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('domain', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('logo_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('subscription_plan', sa.VARCHAR(length=50), server_default=sa.text("'free'::character varying"), autoincrement=False, nullable=True),
    sa.Column('subscription_expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='organizations_pkey'),
    sa.UniqueConstraint('slug', name='organizations_slug_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='Multi-tenant organizations/companies',
    postgresql_ignore_search_path=False
    )
    op.create_table('form_categories',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('color', sa.VARCHAR(length=7), server_default=sa.text("'#3B82F6'::character varying"), autoincrement=False, nullable=True),
    sa.Column('icon', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='form_categories_organization_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='form_categories_pkey'),
    sa.UniqueConstraint('organization_id', 'name', name='form_categories_organization_id_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('report_distributions',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('report_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('method', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('recipient', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('sent_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], name='report_distributions_report_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='report_distributions_pkey')
    )
    op.create_table('api_keys',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('key_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('permissions', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('rate_limit', sa.INTEGER(), server_default=sa.text('1000'), autoincrement=False, nullable=True),
    sa.Column('last_used_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('usage_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='api_keys_organization_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='api_keys_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='api_keys_pkey'),
    sa.UniqueConstraint('key_hash', name='api_keys_key_hash_key', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('performance_metrics',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('metric_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('metric_value', sa.NUMERIC(precision=15, scale=6), autoincrement=False, nullable=False),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='performance_metrics_pkey')
    )
    op.create_table('report_categories',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('color', sa.VARCHAR(length=7), server_default=sa.text("'#10B981'::character varying"), autoincrement=False, nullable=True),
    sa.Column('icon', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='report_categories_organization_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='report_categories_pkey'),
    sa.UniqueConstraint('organization_id', 'name', name='report_categories_organization_id_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('form_analytics',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('form_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('views', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('submissions', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('completion_rate', sa.NUMERIC(precision=5, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('avg_completion_time', sa.NUMERIC(precision=10, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('bounce_rate', sa.NUMERIC(precision=5, scale=2), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('device_breakdown', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('source_breakdown', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('field_analytics', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['form_id'], ['forms.id'], name='form_analytics_form_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='form_analytics_pkey'),
    sa.UniqueConstraint('form_id', 'date', name='form_analytics_form_id_date_key', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    with op.batch_alter_table('form_analytics', schema=None) as batch_op:
        batch_op.create_index('idx_form_analytics_form_date', ['form_id', 'date'], unique=False)

    op.create_table('notifications',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('template_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('recipient', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('subject', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('scheduled_for', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('sent_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('retry_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('max_retries', sa.INTEGER(), server_default=sa.text('3'), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='notifications_organization_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['template_id'], ['notification_templates.id'], name='notifications_template_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='notifications_pkey')
    )
    op.create_table('report_templates',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('category_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('template_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('content_template', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('data_sources', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('styling', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('chart_configs', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('usage_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['report_categories.id'], name='report_templates_category_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='report_templates_created_by_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='report_templates_organization_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='report_templates_pkey')
    )
    op.create_table('integrations',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('credentials', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('last_sync_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('sync_status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('error_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='integrations_created_by_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='integrations_organization_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='integrations_pkey'),
    sa.UniqueConstraint('organization_id', 'name', name='integrations_organization_id_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='External service integrations',
    postgresql_ignore_search_path=False
    )
    with op.batch_alter_table('integrations', schema=None) as batch_op:
        batch_op.create_index('idx_integrations_organization', ['organization_id'], unique=False)

    op.create_table('error_logs',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('error_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('stack_trace', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('request_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('severity', sa.VARCHAR(length=20), server_default=sa.text("'error'::character varying"), autoincrement=False, nullable=True),
    sa.Column('resolved', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('resolved_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('resolved_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='error_logs_organization_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['resolved_by'], ['users.id'], name='error_logs_resolved_by_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='error_logs_user_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='error_logs_pkey')
    )
    op.create_table('form_templates',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('template_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('preview_image_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('usage_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='form_templates_created_by_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='form_templates_organization_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='form_templates_pkey')
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('first_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('last_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('avatar_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('timezone', sa.VARCHAR(length=50), server_default=sa.text("'UTC'::character varying"), autoincrement=False, nullable=True),
    sa.Column('language', sa.VARCHAR(length=10), server_default=sa.text("'en'::character varying"), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('is_verified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('last_login_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('password_changed_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('failed_login_attempts', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('locked_until', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('username', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('company', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('job_title', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('bio', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('theme', sa.VARCHAR(length=20), server_default=sa.text("'light'::character varying"), autoincrement=False, nullable=True),
    sa.Column('email_notifications', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('push_notifications', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='users_organization_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('username', name='users_username_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='System users with enhanced security features',
    postgresql_ignore_search_path=False
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index('idx_users_organization', ['organization_id'], unique=False)
        batch_op.create_index('idx_users_email', ['email'], unique=False)
        batch_op.create_index('idx_users_active', ['is_active'], unique=False)

    op.create_table('webhook_logs',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('integration_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('source', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('event_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('headers', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'received'::character varying"), autoincrement=False, nullable=True),
    sa.Column('processed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('retry_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['integration_id'], ['integrations.id'], name='webhook_logs_integration_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='webhook_logs_organization_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='webhook_logs_pkey')
    )
    with op.batch_alter_table('webhook_logs', schema=None) as batch_op:
        batch_op.create_index('idx_webhook_logs_status', ['status'], unique=False)
        batch_op.create_index('idx_webhook_logs_created_at', ['created_at'], unique=False)

    op.create_table('notification_templates',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('subject', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('variables', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='notification_templates_organization_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='notification_templates_pkey'),
    sa.UniqueConstraint('organization_id', 'name', 'type', name='notification_templates_organization_id_name_type_key', postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('submissions',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('form_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'submitted'::character varying"), autoincrement=False, nullable=True),
    sa.Column('score', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('flags', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('reviewed_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('reviewed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('review_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('source', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('submission_time', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['form_id'], ['forms.id'], name='submissions_form_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['reviewed_by'], ['users.id'], name='submissions_reviewed_by_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='submissions_user_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='submissions_pkey'),
    comment='Form submissions with detailed tracking'
    )
    with op.batch_alter_table('submissions', schema=None) as batch_op:
        batch_op.create_index('idx_submissions_user', ['user_id'], unique=False)
        batch_op.create_index('idx_submissions_status', ['status'], unique=False)
        batch_op.create_index('idx_submissions_form', ['form_id'], unique=False)
        batch_op.create_index('idx_submissions_data_gin', ['data'], unique=False, postgresql_using='gin')
        batch_op.create_index('idx_submissions_created_at', ['created_at'], unique=False)

    op.create_table('audit_logs',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('action', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('resource_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('resource_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('old_values', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('new_values', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('ip_address', postgresql.INET(), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='audit_logs_organization_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='audit_logs_user_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='audit_logs_pkey'),
    comment='Complete audit trail for compliance'
    )
    with op.batch_alter_table('audit_logs', schema=None) as batch_op:
        batch_op.create_index('idx_audit_logs_user', ['user_id', 'created_at'], unique=False)
        batch_op.create_index('idx_audit_logs_resource', ['resource_type', 'resource_id'], unique=False)

    op.drop_table('form_qr_code')
    # ### end Alembic commands ###

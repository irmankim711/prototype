name: Production Deployment Pipeline

on:
  push:
    branches: [main, production]
    tags: ["v*"]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Quality Checks
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install security tools
        run: |
          pip install bandit safety semgrep
          npm install -g audit-ci

      - name: Run Bandit security scan
        run: |
          bandit -r backend/ -f json -o bandit-report.json || true
          bandit -r backend/ -ll

      - name: Run Safety dependency check
        run: |
          pip install -r backend/requirements.txt
          safety check --json --output safety-report.json || true
          safety check

      - name: Run Semgrep static analysis
        uses: returntocorp/semgrep-action@v1
        with:
          config: auto

      - name: Frontend security audit
        run: |
          cd frontend
          npm audit --audit-level moderate

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Unit and Integration Tests
  test-suite:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Cache Node dependencies
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run backend tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          CELERY_BROKER_URL: redis://localhost:6379/0
          CELERY_RESULT_BACKEND: redis://localhost:6379/0
          JWT_SECRET_KEY: test-secret-key
          SECRET_KEY: test-secret-key
        run: |
          cd backend
          python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=html

      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage.xml,./frontend/coverage/lcov.info
          fail_ci_if_error: true

  # Load Testing
  load-testing:
    runs-on: ubuntu-latest
    needs: [test-suite]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install -r ../tests/performance/requirements.txt

      - name: Start application
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          CELERY_BROKER_URL: redis://localhost:6379/0
          CELERY_RESULT_BACKEND: redis://localhost:6379/0
        run: |
          cd backend
          python -m flask db upgrade &
          python -m flask run --host=0.0.0.0 --port=5000 &
          sleep 10

      - name: Run load tests
        run: |
          python tests/performance/run_load_tests.py http://localhost:5000

      - name: Upload load test results
        uses: actions/upload-artifact@v3
        with:
          name: load-test-results
          path: tests/performance/load_test_results/

  # Build and Push Docker Images
  build-and-push:
    runs-on: ubuntu-latest
    needs: [security-scan, test-suite]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=sha-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-push, load-testing]
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to ECS Staging
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster staging-cluster \
            --service form-automation-staging \
            --force-new-deployment

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster staging-cluster \
            --services form-automation-staging

      - name: Run smoke tests
        run: |
          sleep 30  # Allow service to start
          curl -f https://staging.yourdomain.com/health || exit 1
          curl -f https://staging.yourdomain.com/api/health || exit 1

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Blue-Green Deployment Preparation
        run: |
          # Get current active service
          ACTIVE_SERVICE=$(aws ecs describe-services \
            --cluster production-cluster \
            --services form-automation-prod-blue form-automation-prod-green \
            --query 'services[?runningCount>`0`].serviceName' \
            --output text)

          if [[ "$ACTIVE_SERVICE" == "form-automation-prod-blue" ]]; then
            INACTIVE_SERVICE="form-automation-prod-green"
          else
            INACTIVE_SERVICE="form-automation-prod-blue"
          fi

          echo "ACTIVE_SERVICE=$ACTIVE_SERVICE" >> $GITHUB_ENV
          echo "INACTIVE_SERVICE=$INACTIVE_SERVICE" >> $GITHUB_ENV

      - name: Deploy to Inactive Environment
        run: |
          # Update inactive service with new image
          aws ecs update-service \
            --cluster production-cluster \
            --service $INACTIVE_SERVICE \
            --force-new-deployment \
            --desired-count 2

      - name: Wait for Inactive Deployment
        run: |
          aws ecs wait services-stable \
            --cluster production-cluster \
            --services $INACTIVE_SERVICE

      - name: Health Check Inactive Environment
        run: |
          # Get the inactive service endpoint
          INACTIVE_URL="https://inactive.yourdomain.com"

          # Comprehensive health checks
          for i in {1..5}; do
            if curl -f "$INACTIVE_URL/health" && \
               curl -f "$INACTIVE_URL/api/health"; then
              echo "Health check passed"
              break
            fi
            echo "Health check attempt $i failed, retrying..."
            sleep 30
          done

      - name: Switch Traffic (Blue-Green)
        run: |
          # Update load balancer to point to inactive service
          aws elbv2 modify-rule \
            --rule-arn ${{ secrets.ALB_RULE_ARN }} \
            --actions Type=forward,TargetGroupArn=${{ secrets.INACTIVE_TARGET_GROUP_ARN }}

      - name: Monitor Production Health
        run: |
          # Monitor production for 5 minutes
          for i in {1..10}; do
            if ! curl -f "https://yourdomain.com/health"; then
              echo "Production health check failed, rolling back..."
              # Rollback to previous service
              aws elbv2 modify-rule \
                --rule-arn ${{ secrets.ALB_RULE_ARN }} \
                --actions Type=forward,TargetGroupArn=${{ secrets.ACTIVE_TARGET_GROUP_ARN }}
              exit 1
            fi
            sleep 30
          done

      - name: Scale Down Previous Environment
        run: |
          # Scale down the previous active service
          aws ecs update-service \
            --cluster production-cluster \
            --service $ACTIVE_SERVICE \
            --desired-count 0

      - name: Update Database Schema
        run: |
          # Run database migrations if needed
          aws ecs run-task \
            --cluster production-cluster \
            --task-definition migration-task \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.SUBNET_IDS }}],securityGroups=[${{ secrets.SECURITY_GROUP_ID }}],assignPublicIp=ENABLED}"

  # Post-Deployment Monitoring
  post-deployment-monitoring:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Configure monitoring
        run: |
          # Send deployment notification to Slack
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"🚀 Production deployment completed successfully for version ${{ github.ref_name }}"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Update Sentry release
        run: |
          curl -X POST \
            "https://sentry.io/api/0/organizations/${{ secrets.SENTRY_ORG }}/releases/" \
            -H "Authorization: Bearer ${{ secrets.SENTRY_AUTH_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"version": "${{ github.ref_name }}", "projects": ["form-automation"]}'

      - name: Trigger performance monitoring
        run: |
          # Trigger synthetic tests for production monitoring
          curl -X POST \
            "https://api.datadoghq.com/api/v1/synthetics/tests/trigger/ci" \
            -H "Content-Type: application/json" \
            -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
            -d '{"tests": [{"public_id": "${{ secrets.SYNTHETIC_TEST_ID }}"}]}'

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()

    steps:
      - name: Cleanup old images
        run: |
          # Clean up old container images
          echo "Cleaning up old container images..."
          # Implementation would depend on your registry cleanup policy
